进程池技术
	
	产生原因:
		如果有大量任务需要多进程完成,则可能需要频繁的创建删除进程,给计算机带来较多的资源消耗

	原理:
		创建适当的进程放入进程池,用来处理待处理事件,处理完毕后进程不销毁,仍然在进程池中等待处理其他事件.进程的复用降低了资源的消耗

	使用方法:
		1. 创建进程池,在池内放入适当的进程
		2. 将事件加入到进程池等待队列
		3. 不断取进程执行事件,直到所有事件执行完毕
		4. 关闭进程池,回收进程
	函数:
		调用:from multiprocessing import Pool

		Pool(processes)
			功能:创建进程池对象
			参数:表示进程池中有多少进程

		pool.apply_async(func,args,kwds)
			功能:async异步,将事件放入到进程池队列
			参数:func 事件函数
				args 以元组形式给func 传参
				kwds 以字典形式给func 传参
			返回值:返回一个代表进程池事件的对象r
				  r.get() # 获取事件函数的返回值

		pool.apply(func,args,kwds)
			功能:同步依次执行,将事件放入到进程池队列
			参数:func 事件函数
				args 以元组形式给func 传参
				kwds 以字典形式给func 传参

		pool.close()
			功能:关闭进程池

		pool.join()
			功能:回收进程池

		示例:见 pool.py

		pool.map(func,iter)
			功能:将要做的事件放入进程池
			参数:func 要执行的函数
				iter 迭代对象
			返回值:返回事件函数的返回值列表

		示例:见 pool_map.py