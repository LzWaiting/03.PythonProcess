1. 梳理巩固聊天室代码思路

2. 巩固multiprocessing创建进程的方法

3. 创建父子进程,分别将一个文件的上半部分和下半部分复制到一个新的文件中.创建进程方法自选

4. 回顾进程间通信方法
>>>管道通信,消息队列,共享内存,信号通信,信号量,套接字

5. 复习类的使用

6. 对进程使用和原理进行总结

7. 总结进程,线程差异
>>>进程
>>>线程
	两者特点:
	1. 两者都是多任务编程方式,都能够使用计算机的多核资源
	2. 进程的创建删除消耗的计算机资源比线程要多
	3. 进程空间独立,数据相互不干扰,有专门的IPC(进程间通信),线程使用全局变量进行通信
	4. 一个进程可以创建多个线程分支,两者之间存在包含关系
	5. 多个线程公用进程资源,在资源操作时往往需要同步互斥
	6. 进程线程在系统中都有自己特有的属性,ID,代码段,栈区(运行的内存区域)等资源
	使用场景:
	1. 需要创建较多并发,同时任务关联性比较强时,一般用多线程
	2. 不同的任务模块可能更多使用进程
	3. 使用进程线程需要考虑数据的处理复杂度,比如进程间通信是否方便,同步互斥是否过于复杂
	要求:
	1. 进程线程的区别和联系
	2. 进程间通信方式都有那些?各有什么特点?
	3. 同步互斥意义是什么,什么情况下用?
	4. 给一个情形,分析下用进程还是用线程,理由
	5. 常见概念挖掘:僵尸进程,进程状态,GIL

8. 复习网络编程基本内容
>>>

9. 司机和售票员的故事
	* 创建父子进程分别代表司机和售票员
	* 当售票员收到SIGINT信号,给司机发送SIGUSR1信号,此时司机打印'老司机开车了'
	* 当售票员收到SIGQUIT信号,给司机发送SIGUSR2信号,此时司机打印'车速有点快,系好安全带'
	* 当司机捕捉到SIGTSTP信号,给售货员发送SIGUSR1,售票员打印'到站了,请下车'
	* 到站后 售票员先下车,司机再下车(子进程先退出)
	说明:SIGINT SIGQUIT SIGTSTP 从键盘发出
>>>见 code/Bus/driver.py

10. 复习HTTP协议,和httpserver第一版

11. 进程线程网络总结,难点程序再写一遍