课外知识

1. 互斥量（Mutex）
	定义：
		互斥量表现互斥现象的数据结构，也被当作二元信号灯。
		一个互斥基本上是一个多任务敏感的二元信号，它能用作同步多任务的行为，它常用作保护从中断来的临界段代码并且在共享同步使用的资源。
	说明：
		Mutex本质上说就是一把锁，提供对资源的独占访问，所以Mutex主要的作用是用于互斥。
		Mutex对象的值，只有0和1两个值。这两个值也分别代表了Mutex的两种状态。
		值为0, 表示锁定状态，当前对象被锁定，用户进程/线程如果试图Lock临界资源，则进入排队等待；
		值为1，表示空闲状态，当前对象为空闲，用户进程/线程可以Lock临界资源，之后Mutex值减1变为0。

	注：
		当Mutex=1时，表示两个进程皆未进去，需要互斥的临界区
		当Mutex=0时，表示有一个进程进临界区运行，另外一个必须等待，挂入阻塞队列
		当Mutex=-1时，表示有一个进程正在临界区运行，另外一个进程因等待而阻塞在信号量队列中，需要被当前已在临界区运行的进程退出时唤醒

2. 饥饿/死锁/同步/互斥
	饥饿：是指一个可运行的进程尽管能继续执行，但被调度程序无限期地忽略，而不能被调度执行的情形
	死锁：是指两个或两个以上的进程其中每个进程都在等待其他进程做完某些事而不能继续执行
	同步：同步是一种合作关系,为完成某个任务,多进程或者多线程之间形成一种协调,按照约定或条件执行操作临界资源
	互斥：是指当一个进程在临界区访问共享资源时，其他进程不能进入该临界区访问任何共享资源

3. 启动线程时，start()与run()方法区别？
	启动一个线程是start()方法
    启动线程之后，会去调用run方法内容。
    区别：start()是创建并启动一个线程，而run()是要运行线程中的代码

4. 管道通信
	管道是单向的，先进先出，它把一个进程的输出和另一个进程的输入连接在一起。
	一个进程（写进程）在管道的尾部写入数据，另一个进程（读进程）在管道的头部读取数据
	数据被一个进程读出后，将被从管道中删除，其他读进程将再不能读取到这些数据
	管道提供了简单的流控制机制，进程试图读空管道时，进程将阻塞；同样，管道已经满时，进程在试图写入数据，也将阻塞

5. 栈和队列的对比
	队列：先进先出
	栈：先进后出
	两者都是在端点处插入或删除元素

6. 进程间通信
	1.管道（pipe）：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用，进程的亲缘关系通常是指父子进程关系
	2.消息列队（message queue）：消息列队是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点
	3.共享内存（shared memory）：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的IPC方式，它是针对其他进程间通信方式运行效率低而专门设计的。往往与其他通信机制，如信号量等配合使用，来实现进程间的同步和通信
	4.信号量（semophore）：信号量是一个计数器，可以用来控制多个进程对共享资源的访问，他常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段
	5.套接字（socket）：套接字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信

7. 共享内存特点？
	进程共享同一块内存空间
	访问共享内存和访问私有内存一样快
	不需要系统调用和内核出口
	不需要内存复制